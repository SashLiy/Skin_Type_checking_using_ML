# -*- coding: utf-8 -*-
"""Skin Care_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Sl4aewqfdl3qUEhRZWFld48PlTKIJKFq
"""

import cv2
import numpy as np
from sklearn.model_selection import train_test_split
from tensorflow.keras.applications import VGG16
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Dropout
from tensorflow.keras.optimizers import Adam

from google.colab.patches import cv2_imshow
import cv2

# Step 1: Preprocessing the Image
def preprocess_image(image_path):
    img = cv2.imread(image_path)
    if img is None:
        print("Error: Failed to load image from", image_path)
        return None
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    # You can add additional preprocessing steps here if needed
    return gray

# Example usage
if __name__ == "__main__":
    # Specify the paths to the input images
    image_paths = ["/oily_1.jpg","/oily_2.jpg","/oily_3.jpg","/oily_4.jpg","/oily_5.jpg","/oily_6.jpg","/oily_7.jpg","/oily_8.jpg","/oily_9.jpg","/oily_10.jpg","/oily_11.jpg","/oily_12.jpg","/oily_13.jpg","/oily_14.jpg","/oily_15.jpg","/oily_16.jpg","/oily_17.jpg","/oily_18.jpg","/oily_19.jpg","/Less_oily_1.jpg","/Less_oily_2.jpg","/Less_oily_3.jpg","/Less_oily_4.jpg","/Less_oily_5.jpg","/Less_oily_6.jpg","/Less_oily_7.jpg","/Less_oily_8.jpg","/Less_oily_9.jpg","/Less_oily_10.jpg","/Less_oily_11.jpg","/Less_oily_12.jpg","/Less_oily_13.jpg","/Less_oily_14.jpg","/normal_1.jpg","/normal_2.jpg","/normal_3.jpg","/normal_4.jpg","/normal_5.jpg","/normal_6.jpg","/normal_7.jpg","/normal_8.jpg","/normal_9.jpg","/normal_10.jpg","/normal_11.jpg","/normal_12.jpg","/normal_13.jpg","/normal_14.jpg","/normal_15.jpg","/normal_16.jpg","/normal_17.jpg","/normal_18.jpg","/normal_19.jpg","/normal_20.jpg","/normal_21.jpg","/normal_22.jpg","/dry_1.jpg","/dry_2.jpg","/dry_3.jpg","/dry_4.jpg","/dry_5.jpg","/dry_6.jpg","/dry_7.jpg","/dry_8.jpg","/dry_9.jpg","/dry_10.jpg","/dry_11.jpg","/dry_12.jpg","/dry_13.jpg","/dry_14.jpg","/dry_15.jpg","/dry_16.jpg","/dry_17.jpg","/dry_18.jpg","/dry_19.jpg","/dry_20.jpg","/dry_21.jpg","/dry_22.jpg","/dry_23.jpg","/dry_24.jpg","/dry_25.jpg","/dry_26.jpg","/dry_27.jpg","/dry_28.jpg","/dry_29.jpg","/dry_30.jpg","/dry_31.jpg","/dry_32.jpg","/dry_33.jpg","/dry_34.jpg"]


    # Iterate over each image path and preprocess the image
    for image_path in image_paths:
        preprocessed_image = preprocess_image(image_path)

        if preprocessed_image is not None:
            # Display the preprocessed image
            cv2_imshow(preprocessed_image)

# Step 3: Model Selection
base_model = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Step 4: Fine-tuning
model = Sequential([
    base_model,
    Flatten(),
    Dense(256, activation='relu'),
    Dropout(0.5),
    Dense(4, activation='softmax')  # Output layer with 4 classes
])

# Freeze the base model layers
base_model.trainable = False

# Step 5: Training
# Compile the model
model.compile(optimizer=Adam(lr=0.0001), loss='sparse_categorical_crossentropy', metrics=['accuracy'])

x = ["/oily_1.jpg","/oily_2.jpg","/oily_3.jpg","/oily_4.jpg","/oily_5.jpg","/oily_6.jpg","/oily_7.jpg","/oily_8.jpg","/oily_9.jpg","/oily_10.jpg","/oily_11.jpg","/oily_12.jpg","/oily_13.jpg","/oily_14.jpg","/oily_15.jpg","/oily_16.jpg","/oily_17.jpg","/oily_18.jpg","/oily_19.jpg","/Less_oily_1.jpg","/Less_oily_2.jpg","/Less_oily_3.jpg","/Less_oily_4.jpg","/Less_oily_5.jpg","/Less_oily_6.jpg","/Less_oily_7.jpg","/Less_oily_8.jpg","/Less_oily_9.jpg","/Less_oily_10.jpg","/Less_oily_11.jpg","/Less_oily_12.jpg","/Less_oily_13.jpg","/Less_oily_14.jpg","/normal_1.jpg","/normal_2.jpg","/normal_3.jpg","/normal_4.jpg","/normal_5.jpg","/normal_6.jpg","/normal_7.jpg","/normal_8.jpg","/normal_9.jpg","/normal_10.jpg","/normal_11.jpg","/normal_12.jpg","/normal_13.jpg","/normal_14.jpg","/normal_15.jpg","/normal_16.jpg","/normal_17.jpg","/normal_18.jpg","/normal_19.jpg","/normal_20.jpg","/normal_21.jpg","/normal_22.jpg","/dry_1.jpg","/dry_2.jpg","/dry_3.jpg","/dry_4.jpg","/dry_5.jpg","/dry_6.jpg","/dry_7.jpg","/dry_8.jpg","/dry_9.jpg","/dry_10.jpg","/dry_11.jpg","/dry_12.jpg","/dry_13.jpg","/dry_14.jpg","/dry_15.jpg","/dry_16.jpg","/dry_17.jpg","/dry_18.jpg","/dry_19.jpg","/dry_20.jpg","/dry_21.jpg","/dry_22.jpg","/dry_23.jpg","/dry_24.jpg","/dry_25.jpg","/dry_26.jpg","/dry_27.jpg","/dry_28.jpg","/dry_29.jpg","/dry_30.jpg","/dry_31.jpg","/dry_32.jpg","/dry_33.jpg","/dry_34.jpg"]

y = ["Oily","Oily","Oily","Oily","Oily","Oily","Oily","Oily","Oily","Oily","Oily","Oily","Oily","Oily","Oily","Oily","Oily","Oily","Oily","Oily","Oily","Oily","Oily","Oily","Oily","Oily","Oily","Oily","Oily","Less oily","Less oily","Less oily","Less oily","Less oily","Less oily","Less oily","Less oily","Less oily","Less oily","Less oily","Less oily","Less oily","Less oily","Normal","Normal","Normal","Normal","Normal","Normal","Normal","Normal","Normal","Normal","Normal","Normal","Normal""Normal""Normal","Normal","Normal","Normal","Normal""Normal","Normal""Normal","Dry","Dry","Dry","Dry","Dry","Dry","Dry","Dry","Dry","Dry","Dry","Dry","Dry","Dry","Dry","Dry","Dry","Dry","Dry","Dry","Dry""Dry","Dry","Dry","Dry","Dry","Dry","Dry","Dry","Dry","Dry","Dry","Dry","Dry"]

# Convert oiliness levels to numerical labels
def convert_to_numerical_labels(oiliness_levels):
    numerical_labels = []
    for level in oiliness_levels:
        if level.lower() == "Oily":
            numerical_labels.append[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]
        elif level.lower() == "Less oily":
            numerical_labels.append[30,31,32,33,34,35,36,37,38,39,40,41,42,43]
        elif level.lower() == "Normal":
            numerical_labels.append[44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65]
        elif level.lower() == "Dry":
            numerical_labels.append[66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]
        else:
            raise ValueError("Invalid oiliness level: {}".format(level))
    return numerical_labels

# Convert oiliness levels to numerical labels
y = convert_to_numerical_labels(y)